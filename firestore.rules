
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isProjectMember(projectId) {
      return exists(/databases/$(database)/documents/projects/$(projectId)) &&
             request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.roles;
    }

    function isProjectEditor(projectId) {
      let role = get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid];
      return role == 'Owner' || role == 'Editor';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Users can only read and write their own data
      allow read, update, delete: if request.auth.uid == userId;
      // Any authenticated user can create their own user document
      allow create: if request.auth.uid == userId;
    }

    // Rules for the 'projects' collection
    match /projects/{projectId} {
      allow read: if isProjectMember(projectId);
      
      // A user can create a project if they are authenticated and are setting themselves as the owner.
      allow create: if request.auth.uid != null && request.resource.data.roles[request.auth.uid] == 'Owner';
      
      // Only the owner can update the project settings (name, budget) or manage roles.
      allow update: if get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] == 'Owner';
      
      // Only the owner can delete a project.
      allow delete: if get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] == 'Owner';
      
      // Rules for subcollections within a project
      match /{subcollection}/{docId} {
        allow read: if isProjectMember(projectId);
        allow create, update, delete: if isProjectEditor(projectId);
      }
    }
  }
}
