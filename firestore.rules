rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Helper Functions
    // =================================
    
    function isProjectMember(project) {
      return request.auth.uid in project.data.roles;
    }
    
    function isProjectEditor(project) {
      return project.data.roles[request.auth.uid] in ['Owner', 'Editor'];
    }
    
    function isProjectOwner(project) {
      return project.data.roles[request.auth.uid] == 'Owner';
    }

    // =================================
    // User Preferences
    // =================================
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // =================================
    // Projects Collection
    // =================================
    match /projects/{projectId} {
      // READ: Any authenticated project member can read.
      allow read: if request.auth.uid != null && isProjectMember(resource);

      // CREATE: The person creating the project must be the owner.
      allow create: if request.auth.uid != null && isProjectOwner(request.resource);

      // UPDATE/DELETE: Only the owner can update settings or delete the project.
      allow update, delete: if request.auth.uid != null && isProjectOwner(resource);
      
      
      // =================================
      // Generic Subcollection Rules
      // =================================
      
      // This single block covers: /accounts, /categories, /transactions, /recurringTransactions
      match /{subcollection}/{docId} {
        
        // READ: Allow if the user is a member of the parent project.
        allow read: if request.auth.uid != null && isProjectMember(get(/databases/$(database)/documents/projects/$(projectId)));
        
        // WRITE: Allow if the user is an owner/editor.
        // This handles two cases:
        // 1. Writing to an EXISTING project (using get()).
        // 2. Writing as part of a BATCH with a NEW project (using getAfter()).
        allow write: if request.auth.uid != null && (
          isProjectEditor(get(/databases/$(database)/documents/projects/$(projectId))) ||
          isProjectEditor(getAfter(/databases/$(database)/documents/projects/$(projectId)))
        );
      }
    }
  }
}
