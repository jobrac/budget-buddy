rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isProjectMember(projectId) {
      return isUserAuthenticated() && get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] in ['Owner', 'Editor', 'Viewer'];
    }

    function isProjectEditor(projectId) {
      return isUserAuthenticated() && get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] in ['Owner', 'Editor'];
    }

    function isProjectOwner(projectId) {
      return isUserAuthenticated() && get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] == 'Owner';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Users can only read and write to their own document
      allow read, update: if isUserAuthenticated() && request.auth.uid == userId;
      allow create: if isUserAuthenticated();
    }

    // Rules for the 'projects' collection
    match /projects/{projectId} {
      allow read: if isProjectMember(projectId);
      allow create: if isUserAuthenticated() && request.resource.data.roles[request.auth.uid] == 'Owner';
      allow update, delete: if isProjectOwner(projectId);

      // Rules for all subcollections within a project
      match /{subcollection}/{docId} {
        // Reads are allowed for any project member
        allow read, list: if isProjectMember(projectId);
        
        // Writes (create, update, delete) are restricted to Editors and Owners.
        // This rule works for both creating a new project with its categories in a batch,
        // and for modifying subcollections of existing projects.
        allow write: if isProjectEditor(projectId);
      }
    }
  }
}
