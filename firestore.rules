rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isProjectMember(projectId) {
      return isSignedIn() && exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] in ['Owner', 'Editor', 'Viewer'];
    }

    function isProjectEditor(projectId) {
      return isSignedIn() && exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] in ['Owner', 'Editor'];
    }
    
    function isProjectOwner(projectId) {
      return isSignedIn() && exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] == 'Owner';
    }

    // Projects Collection
    match /projects/{projectId} {
      allow read: if isProjectMember(projectId);
      allow create: if isSignedIn() && request.resource.data.roles[request.auth.uid] == 'Owner';
      allow update: if isProjectOwner(projectId);
      allow delete: if isProjectOwner(projectId);
      
      // Sub-collections
      match /{subcollection}/{docId} {
        allow read: if isProjectMember(projectId);
        allow write: if isProjectEditor(projectId);
      }
    }
    
    // Users Collection (for user preferences)
    match /users/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }
  }
}
