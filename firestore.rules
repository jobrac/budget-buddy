
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getProjectRoles() {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.roles;
    }
    
    function isProjectMember() {
      return isSignedIn() && request.auth.uid in getProjectRoles();
    }

    function isProjectOwner() {
      return isProjectMember() && getProjectRoles()[request.auth.uid] == 'Owner';
    }

    function isProjectEditor() {
      return isProjectMember() && getProjectRoles()[request.auth.uid] in ['Owner', 'Editor'];
    }

    // Rules for user-specific data (e.g., preferences)
    match /users/{userId} {
      allow read, write: if isUser(userId);
    }
    
    // Rules for the 'projects' collection
    match /projects/{projectId} {
      allow read: if isProjectMember();
      
      // A user can create a project if they are authenticated and are setting themselves as the owner.
      allow create: if isSignedIn() && request.resource.data.roles[request.auth.uid] == 'Owner';
      
      allow update, delete: if isProjectOwner();
      
      // Rules for all subcollections within a project
      match /{allSubcollections}/{docId} {
        allow read: if isProjectMember();
        
        // This is the key fix:
        // Allow write if the user IS an editor of an existing project
        // OR if the user is creating the project in the same transaction and making themselves owner.
        allow write: if isProjectEditor() || (request.resource.data.size() > 0 && request.auth.uid in getAfter(/databases/$(database)/documents/projects/$(projectId)).data.roles && getAfter(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] == 'Owner');
      }
    }
  }
}
