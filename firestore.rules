
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to get the user's role for a specific project
    function getRole(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid];
    }

    match /projects/{projectId} {
      // READ: Allow if the user's UID is in the project's roles map.
      allow read: if isAuthenticated() && request.auth.uid in resource.data.roles;
      
      // CREATE: Allow if the user is authenticated and is setting themselves as the 'Owner'.
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.roles[request.auth.uid] && request.resource.data.roles[request.auth.uid] == 'Owner';
      
      // UPDATE: Allow if the user is an 'Owner' or 'Editor'.
      allow update: if isAuthenticated() && (getRole(projectId) == 'Owner' || getRole(projectId) == 'Editor');

      // DELETE: Only allow if the user is an 'Owner'.
      allow delete: if isAuthenticated() && getRole(projectId) == 'Owner';
      
      // Subcollections
      match /{subcollection}/{docId} {
        // READ: Allow if user has any role in the parent project.
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.roles;
        
        // WRITE (Create, Update): Allow if user is 'Owner' or 'Editor'.
        allow write: if isAuthenticated() && (getRole(projectId) == 'Owner' || getRole(projectId) == 'Editor');
      }
    }
    
    match /users/{userId} {
    	// Allow users to read and write their own preferences document
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}
