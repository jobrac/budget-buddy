
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user has a role in a project
    function isProjectMember(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] != null;
    }
    
    // Helper function to check if a user is the owner of a project
    function isProjectOwner(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] == 'Owner';
    }
    
     // Helper function to check if a user is an editor or owner
    function canWrite(projectId) {
      let userRole = get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid];
      return userRole == 'Owner' || userRole == 'Editor';
    }

    // Projects can be created by any authenticated user.
    // Reading, updating, and deleting projects are restricted to project members.
    // Only the owner can modify the roles.
    match /projects/{projectId} {
      allow create: if request.auth != null;
      allow read, delete: if isProjectMember(projectId);
      
      // Allow updates if the user is an owner, OR if they are an editor and not touching the roles field.
      allow update: if (isProjectOwner(projectId)) || 
                      (canWrite(projectId) && !('roles' in request.resource.data));
    }
    
    // Sub-collections can only be accessed by project members.
    // Write access (create, update, delete) is limited to Owners and Editors.
    match /projects/{projectId}/{collectionId}/{documentId} {
      allow read: if isProjectMember(projectId);
      allow write: if canWrite(projectId);
    }
    
    // Allow users to read and write to their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
