rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isProjectMember(projectId) {
      return isAuth() && get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] in ['Owner', 'Editor', 'Viewer'];
    }

    function isProjectEditor(projectId) {
      return isAuth() && get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] in ['Owner', 'Editor'];
    }
    
    function isProjectOwner(projectId) {
      return isAuth() && get(/databases/$(database)/documents/projects/$(projectId)).data.roles[request.auth.uid] == 'Owner';
    }

    // Rules for the 'projects' collection
    match /projects/{projectId} {
      allow read: if isProjectMember(projectId);
      allow create: if isAuth() && request.resource.data.roles[request.auth.uid] == 'Owner';
      allow update: if isProjectOwner(projectId);
      allow delete: if isProjectOwner(projectId);

      // Rules for sub-collections within a project
      match /{subcollection}/{docId} {
        allow read: if isProjectMember(projectId);
        allow write: if isProjectEditor(projectId); // Create, Update, Delete
      }
    }
    
    // Rules for the 'users' collection (for user preferences)
    match /users/{userId} {
      allow read, write: if isUser(userId);
    }
  }
}
